Timestamp	Dans quelle entreprise ou laboratoire travaillez-vous ?	Etes-vous...	Est-ce que les applications sur lesquelles vous travaillez communiquent avec d'autres applications/systèmes ?	Combien de VM avez-vous dans votre SI ?	Quels sont les trois problèmes les plus importants que vous rencontrez dans le SI sur lequel vous travaillez ?	Quel est votre degré de connaissance du SI sur lequel vous travaillez ?	Quelles sont les trois principales difficultés que vous avez à surmonter pour bien connaître votre SI ?	A quel point est-ce difficile de trouver où placer une nouvelle fonctionnalité dans le SI sur lequel vous travaillez ?	Quelles sont les 3 contraintes qui vous bloquent le plus lorsque vous devez déterminer où placer une nouvelle fonctionnalité dans le SI ?	Combien de temps cela vous prend-il, en moyenne ?	A quel point est-il complexe d’ajouter une fonctionnalité dans votre SI ?	Dans quelle mesure avez-vous les outils et informations nécessaires à votre disposition pour mesurer l’impact technique qu’aura l’ajout d’une fonctionnalité à votre SI ?	Quels sont les trois facteurs qui vous ralentissent le plus lorsque vous concevez de nouvelles fonctionnalités ?	Lorsque vous vous rendez compte que l’ajout d’une nouvelle fonctionnalité nécessite de créer une nouvelle version majeure de l’API, préférez-vous .. ?	Pour quelles raisons prenez-vous cette décision ? 	Dans une architecture micro-services, plus les responsabilités sont isolées, plus le nombre de micro-services augmente. Par conséquent, il devient fréquent qu'un autre service, souvent front-end, soit client de l'API de plusieurs micro-services afin d'agréger l'information dispersée dans le SI. En tant qu'architecte du SI, vous prenez en compte cette problématique en ...	Dans quelle mesure avez-vous les moyens de réaliser de nouvelles fonctionnalités dans un temps raisonnable ?	Tout ou partie des technologies que vous devez utiliser vous sont-elles imposées ?	Dans quelle mesure diriez-vous que les technologies qui vous sont imposées vous ralentissent et/ou limitent vos possibilités ?	Dans le cas où vous consommez une API, quelle part du temps de développement consacrez-vous à réécrire les contrats métier (rôles utilisateurs, modèles de données, ordre des opérations, droits d’accès, règles de validation) déjà écrits sur le serveur ?	Quels sont les 3 facteurs qui vous empêchent le plus d’être à même de réaliser de nouvelles fonctionnalités dans un temps raisonnable ?	Dans quelle mesure vous est-il difficile d’identifier une anomalie ?	Dans quelle mesure les outils de monitoring que vous utilisez vous permettent d’être prévenu de dysfonctionnement ?	Quels sont les trois éléments qui vous manquent le plus pour identifier et qualifier les anomalies de production au mieux ?	Lorsqu’il s’agit de corriger les anomalies de fonctionnement, le problème se situe-t-il majoritairement du côté des développeurs ou de l’infrastructure ?	Quels sont les trois facteurs qui vous ralentissent le plus dans la correction des anomalies qui surviennent en production ?	Dans quelle mesure empêcher les régressions est un problème compliqué dans votre SI ?	Dans quelle mesure identifier les régressions est un problème compliqué dans votre SI ?	A quelle fréquence rencontrez-vous des problèmes liés à des régressions ?	Quels sont les 3 éléments qui vous manquent le plus pour augmenter votre confiance de ne pas avoir de régressions ?	Pourquoi n’avez-vous pas encore ces outils ?	A quel point vous est-il difficile de mettre à jour le SI ?	Quels sont les trois facteurs qui freinent le plus votre capacité à mettre à jour le SI ?	Quels rôles prennent part aux discussions entourant le métier pour lequel vous concevez et développez votre SI ?	Faites-vous régulièrement des points pour analyser l’adéquation entre le métier et le SI ?	Quelles méthodes de travail/conception utilisez-vous pour travailler sur les problématiques métier ?	Formalisez-vous un dictionnaire des termes métier ?	Si oui, avec quels outils ?	Avez-vous des dictionnaires de donnée standardisés pour votre métier ?	Avez-vous des dictionnaires et des structures de données standardisés pour votre métier ?	Comment intégrez-vous les concepts métier au travers du SI ?	A quels endroits de votre SI peut-on les retrouver ? 	Avez-vous un service (au sens informatique) responsable de détenir le dictionnaire du métier ?	Comment vous assurez-vous que les concepts métier sont utilisés uniformément au travers du SI ?
11/13/2018 16:31:15	Fabernovel	Architecte et développeur	Oui	Entre 100 et 500	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à identifier et qualifier les anomalies de fonctionnement	3	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort	Entre une semaine et un mois	5	2	Trouver les fonctionnalités similaires et garder une cohérence globale; Négociation des contrats d’interfaces; Intégration du legacy	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3		2		Méthodologie de travail; Changements de direction fréquents; Spécifications pas assez riches	2	1	Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	3	4	Chaque semaine	Processus de livraison et déploiement continus; Equipes dédiées à la QA (Quality Assurance)		4	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Utilisateur finaux; Développeurs; Chef de projet; Top management; Architecte; Designer	Oui		Oui		Non	Non			Oui	
11/15/2018 16:24:56	Fabernovel	Architecte et développeur	Oui	Moins de 100	Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	2	Découpage fonctionnel flou; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	3	Couplage client/serveur et éventualité de casser un client; Négociation des contrats d’interfaces; Besoin métier à clarifier	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Les clients ne se mettent pas facilement à jour.	Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	4	Oui	2	20%	Méthodologie de travail; Changements de direction fréquents; Spécifications pas assez riches	2	2	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	1	3	Chaque semaine	Outils de détection automatique des régressions; Equipes dédiées à la QA (Quality Assurance)	Manque de moyens	4	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Top management; Architecte	Non		Non		Non	Oui	Utilisation d'un vocabulaire commun	Dans les couches proches de l'utilisateur	Non	
11/16/2018 13:43:13	Fabernovel	Architecte et développeur	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé	2	Découpage fonctionnel flou; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	3	Versionnement des APIs; Trouver les fonctionnalités similaires et garder une cohérence globale; Connaissance du SI incomplète	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3		1	10%	Méthodologie de travail; Changements de direction fréquents; Spécifications pas assez riches	3	4	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Perte de la connaissance du projet; Manque de compétences sur les technologies de développement utilisées	2	2	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		0	Couplage entre les systèmes; Contrats immuables conclus entre les équipes projet; Processus de déploiement longs	Utilisateur finaux; Développeurs; Designer	Non		Oui	html	Oui	Oui	les concepts métiers sont modélisées dans notre code	dans le code	Oui	impossible de savoir
11/22/2018 16:06:48	Fabernovel	Consultant	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI	1	Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Pas de référentiel des applications en production; Applications mises en production par les équipes sans transparence (shadow IT)	3	Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort; Règles de sécurité fortes à respecter	Plus de trois mois	3	2	Couplage client/serveur et éventualité de casser un client; Intégration du legacy; Connaissance du SI incomplète		les cas clients couvrent ....		2	Oui	3	20%	Technologies imposées; Compétence des équipes projet; Méthodologie de travail	2	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents; Processus métier trop rigides	2	2	Moins de une fois par mois	Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)		3	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Chef de projet; Business analyst	Non		Non		Non	Non			Non	
11/23/2018 11:56:53	Fabernovel	Consultant	Oui	Plus de 3 000	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	1	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Applications mises en production par les équipes sans transparence (shadow IT)	4	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre une semaine et un mois	3	0	Couplage client/serveur et éventualité de casser un client; Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Non	4	40% et plus	Méthodologie de travail; Changements de direction fréquents; Mise à jour des tests de non-régression	3	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Perte de la connaissance du projet	4	5	Chaque semaine	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)	Budget / Manque de ROI 	4	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie; Processus de déploiement longs	Développeurs; Chef de projet; Architecte	Non		Non		Non	Non			Non	
12/5/2018 10:31:00	Fabernovel	Architecte et développeur	Oui	Je ne sais pas		2	Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production; Applications mises en production par les équipes sans transparence (shadow IT)	4	Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre une semaine et un mois	4	4	Trouver les fonctionnalités similaires et garder une cohérence globale; Adaptation aux technologies imposées; Intégration du legacy	Faire la nouvelle version majeure		Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	4	Oui	1	10%	Méthodologie de travail; Spécifications pas assez riches; Mise à jour des tests de non-régression	4	4	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Perte de la connaissance du projet	5	5	Chaque semaine	Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)		5	Contrats immuables conclus entre les équipes projet; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Développeurs; Chef de projet; Designer	Oui		Non		Non	Non			Je ne sais pas	
12/5/2018 16:08:00	Inria	Architecte et développeur	Oui	Entre 1 000 et 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	3	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible);	1	Hétérogénéité des technologies; Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	1	Adaptation aux technologies imposées; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	Pour limiter la dette technique et conserver une maintenabilité du SI tout en l'enrichissant		3	Oui	3	10%	Changements de direction fréquents; Spécifications pas assez riches	4	1	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Perte de la connaissance du projet; Couplages entre systèmes forts et documentation erronée	3	3	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		1	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Développeurs; Chef de projet; Architecte; Représentant des utilisateurs (Directions Fonctionnelles)	Non	Agile	Non		Non	Non	Dans les référentiels de données	Dans le hub de données centralisant certains référentiels, ou dans les référentiels eux même	Non	en partageant les référentiels et les typologies
12/5/2018 16:35:29	Orange	Consultant	Oui	Entre 100 et 500	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à identifier et qualifier les anomalies de fonctionnement	4	Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	3	Architecture trop rigide / couplage entre les composants très fort	Entre un et trois mois	3	2	Versionnement des APIs; Intégration du legacy; Besoin métier à clarifier	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Oui	1	10%	Méthodologie de travail; Changements de direction fréquents; Spécifications pas assez riches	2	5		Développeurs	Impossibilité de reproduire les tests	3	2	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Equipes dédiées à la QA (Quality Assurance)		2		Utilisateur finaux; Chef de projet; Architecte; Designer	Oui	Agile	Non		Non	Non			Non	
12/5/2018 17:01:28	Inria	Architecte	Oui	Entre 1 000 et 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Applications mises en production par les équipes sans transparence (shadow IT)	3	Hétérogénéité des technologies; Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Entre une semaine et un mois	3	1	Couplage client/serveur et éventualité de casser un client; Trouver les fonctionnalités similaires et garder une cohérence globale; Besoin métier à clarifier	Remettre en question la nécessité de développer cette fonctionnalité		Spécialisant les APIs au mieux pour un client spécifique	2	Non	2	20%	Technologies imposées; Compétence des équipes projet; Méthodologie de travail	2	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Manque de compétences sur les technologies de développement utilisées	4	3	Chaque mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		2	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Utilisateur finaux; Chef de projet; Top management	Non		Non		Non	Non			Non	
12/6/2018 0:42:10	Mediego	CTO	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	5	Documentation incomplète ou pas à jour; Manque de connaissances ou compétences	1		Moins de un jour	1	1	Couplage client/serveur et éventualité de casser un client; Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy	Faire la nouvelle version majeure	Même si on l'évite au maximum, si une version majeure est la solution la plus simple à développer et maintenir, alors on n'hésite pas à le faire.	Minimisant le nombre de micro-services	5	Non	2	10%	Technologies imposées	3	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Impossibilité de reproduire les tests	5	5	Moins de une fois par mois	Tests de non-régressions métier écrits par le métier; L'inertie du système en production peut cacher une régression pendant plusieurs jours	Dans notre cas, le contexte d'un bug est constitué de données diverses et en grand nombre. C'est donc coûteux de créer les données de test pour vérifier les régressions.	1		Utilisateur finaux; Développeurs; service commercial	Oui	Nous gardons un contact étroit avec nos clients afin de développer uniquement les besoins métiers dans les meilleurs délais. Pour cela, nous évitons de mettre en place des processus trop lourds pour la mise en production. Nous essayons aussi de découper les fonctionnalités à implémenter pour que le cycle de mise en production soit le plus cours possible.	Non				Chaque service a une dépendance vers une librairie décrivant les concepts principaux	Partout !	Non	Chaque service a une dépendance vers une librairie décrivant les concepts principaux
12/7/2018 11:49:17	Groupe UP France	pilote de la stratégie technique	Oui	Entre 500 et 1000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à identifier et qualifier les anomalies de fonctionnement	3	Documentation incomplète ou pas à jour; Pas de référentiel des applications en production; Applications mises en production par les équipes sans transparence (shadow IT)	2	Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI	Plus de trois mois	3	3	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	pour garder la cohérence globale 	Spécialisant les APIs au mieux pour un client spécifique	3	Non	3	10%	Compétence des équipes projet; Changements de direction fréquents; Spécifications pas assez riches	2	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Processus métier trop rigides; Manque de compétences sur les technologies de développement utilisées	4	3	Moins de une fois par mois	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)	choix et urgences de projets et budgets 	4	Couplage entre les systèmes; Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Chef de projet; Top management; Architecte	Non	il n'y a pas de méthode spécifique ... c'est à l'initiative des individus et au gré des problèmes 	Oui	CBL	Non	Non	processus d'étude et de validation 	base documentaire	Non	revue tous les 6 mois 
12/7/2018 17:25:33	Fabernovel	Développeur	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	3	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	2	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	2	Couplage client/serveur et éventualité de casser un client; Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy	Faire la nouvelle version majeure	J'aurais dis remettre en question la nécessité de la développer mais si il s'avère que c'est une fonctionnalité importante. rien n'empeche d'ajouter de livré une new version...		2	Oui	3	20%	Technologies imposées; Réécriture des contrats métier; Spécifications pas assez riches	2	1	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Perte de la connaissance du projet	2	2	Chaque mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Equipes dédiées à la QA (Quality Assurance)	2	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests	Utilisateur finaux; Top management; Architecte	Oui	DDD	Oui	Excel	Non	Non			Non	Validation du Swagger
12/8/2018 9:39:25	LCL	Architecte et développeur	Oui	Entre 100 et 500	Difficulté à identifier où positionner une nouvelle fonctionnalité; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Applications mises en production par les équipes sans transparence (shadow IT)	3	Architecture trop rigide / couplage entre les composants très fort; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Plus de trois mois	3	2	Intégration du legacy; Besoin métier à clarifier; Budget alloué non suffisant	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Trop de client	Spécialisant les APIs au mieux pour un client spécifique	2	Oui	4	20%	Technologies imposées; Compétence des équipes projet; Changements de direction fréquents	4	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple)	3	4	Chaque semaine	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier	Infogérant a la traîne, métier non impliqué	3	Catalogue de technologies imposées par la direction de la SI; Processus de déploiement longs	Développeurs; Chef de projet; Architecte	Non	Agile et cycle en V							Je ne sais pas	
12/8/2018 10:12:17	Labanquepostale	Expert SI	Oui	Plus de 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier où positionner une nouvelle fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	4	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Règles de sécurité fortes à respecter	Plus de trois mois	4	0	Intégration du legacy; Connaissance du SI incomplète	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Impact à gérer : quick change	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Non	3	10%	Spécifications pas assez riches; Mise à jour des tests de non-régression	4	1	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Des outils d’audit détectant les valeurs incohérentes calculées par le système; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Environnements de test et production très différents; Perte de la connaissance du projet; Couplages entre systèmes forts et documentation erronée	4	4	Chaque semaine	Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)	Les outils sont là, mais sans gouvernance	5	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Top management; Architecte	Non	GDI(support transformé en shadow evolution) et parfois GDP(si impact fort)	Non				Organisations Entité Urbanisation et Entité Métier	Multi Portails	Je ne sais pas	Pas de procédures mises en place
12/10/2018 14:31:02	Groupe UP France	Développeur	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	3	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort	Entre une semaine et un mois	4	0	Négociation des contrats d’interfaces; Connaissance du SI incomplète; Besoin métier à clarifier	Remettre en question la nécessité de développer cette fonctionnalité	Par manque de maîtrise sur le système global et manque de temps	Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	1	Non		40% et plus	Compétence des équipes projet; Méthodologie de travail; Spécifications pas assez riches	4	0	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	4	5	Chaque semaine	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		4	Couplage entre les systèmes	Développeurs; Chef de projet	Non		Non		Non	Non	Dans le code	Il y a un fichier xml moche	Oui	Des swagger sont demandé en avance de phase, mais personne ne les fournis
12/14/2018 15:33:09	RATP	Architecte	Oui	Entre 1 000 et 3 000	Difficulté à corriger les anomalies; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production	2	Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Plus de trois mois	2	2	Négociation des contrats d’interfaces; Intégration du legacy; Besoin métier à clarifier	Remettre en question la nécessité de développer cette fonctionnalité	couts élevés + délais long + besoins souvent mal cadré ou incomplet		0	Oui	4	10%	Technologies imposées; Méthodologie de travail; Mise à jour des tests de non-régression	3	4	La capacité à monitorer certaines technologies utilisées en production	Développeurs	Environnements de test et production très différents; Processus métier trop rigides	3	5	Moins de une fois par mois	Tests de non-régressions métier écrits par le métier; un environnement de test représentatif de la production		5	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Utilisateur finaux; Développeurs; Chef de projet; Top management; Architecte	Oui		Non		Non	Non			Non	
12/14/2018 15:59:17	EURA NOVA	Architecte	Oui	Entre 100 et 500	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	3	Manque de connaissances ou compétences	1	Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI	Entre un jour et une semaine	1	3	Versionnement des APIs; Intégration du legacy	Faire la nouvelle version majeure		Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	2	Oui	3	10%	Compétence des équipes projet; Réécriture des contrats métier; Changements de direction fréquents	2	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents	1	1	Chaque mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		2	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests	Utilisateur finaux; Développeurs; Chef de projet; Architecte; Designer	Oui		Oui	Collibra	Oui	Oui			Oui	
12/14/2018 16:19:35	Enovos Luxembourg sa	Architecte	Oui	Entre 100 et 500	Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Applications mises en production par les équipes sans transparence (shadow IT)	2	Directions à suivre, imposées par la SI, peu claires ou changeantes; Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Entre une semaine et un mois	2	3	Intégration du legacy; Besoin métier à clarifier; Budget alloué non suffisant	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Oui	4	20%	Technologies imposées; Changements de direction fréquents; Spécifications pas assez riches	2	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Des outils d’audit détectant les valeurs incohérentes calculées par le système	Infrastructure	Environnements de test et production très différents; Processus métier trop rigides	3	3	Chaque mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	En cours de déploiement 	2	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Top management; Architecte; Ciso	Non		Non		Non	Non			Non	
12/14/2018 16:43:09	GIP-SIB	Développeur	Oui	Moins de 100	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	3		3	Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre une semaine et un mois	3	2	Intégration du legacy; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure		Minimisant le nombre de micro-services	2	Non	2	10%	Réécriture des contrats métier; Changements de direction fréquents; Spécifications pas assez riches	3	1	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Manque de compétences sur les technologies de développement utilisées	4	3	Chaque mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		4	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Pas de temps alloué pour le faire	Utilisateur finaux; Développeurs; Chef de projet	Non		Non		Oui	Non			Non	
12/14/2018 16:45:34	Carrefour	Consultant	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	3	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	3	Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Disponibilité et budget des équipes projet	Entre une semaine et un mois	4	2	Versionnement des APIs; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	Obliger les consommateurs à adopter tôt les changements 	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Non	2	30%	Méthodologie de travail; Changements de direction fréquents	3	4	Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents	3	2	Chaque mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions	En cours 	1	Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Architecte	Non		Oui	Wiki	Oui	Non	Business rules	Microservices	Non	
12/14/2018 18:24:21	PayPal	Architecte et développeur	Oui	Plus de 3 000	Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	4	Nombre d’interlocuteurs élevé	1	Architecture trop rigide / couplage entre les composants très fort; Règles de sécurité fortes à respecter	Entre une semaine et un mois	1	5	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	5	Non	0	10%	Mise à jour des tests de non-régression	2	4	Des outils d’audit détectant les valeurs incohérentes calculées par le système	Développeurs	Difficulté à reproduire des erreurs de connexion aléatoires qui peuvent survenir dans un système fortement distribué	1	1	Chaque semaine	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier		1	Couplage entre les systèmes	Développeurs; Chef de projet; Top management; Architecte	Oui	Agile	Non		Non	Non			Non	
12/14/2018 20:57:39	Sopra Steria	Architecte	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible)	2	Architecture trop rigide / couplage entre les composants très fort; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Disponibilité et budget des équipes projet	Entre une semaine et un mois	4	3	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Oui	3	10%	Compétence des équipes projet; Changements de direction fréquents; Spécifications pas assez riches	2	1	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	4	3	Chaque mois	Processus de livraison et déploiement continus	Processus de livraison existant mais généralement non suivi par les équipes car jugé "trop contraignant et nous ralentissant".	4	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Utilisateur finaux; Chef de projet; Business Analyst	Non		Oui	Wiki	Non	Non			Non	
12/14/2018 21:24:44	Engie	Architecte	Oui	Entre 500 et 1000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Manque de connaissances ou compétences	1	Hétérogénéité des technologies	Plus de trois mois	1	3	Intégration du legacy; Connaissance du SI incomplète	Faire la nouvelle version majeure	La notion de majeur n'étant pas definie, je ne remets pas en cause l'orientation API	Spécialisant les APIs au mieux pour un client spécifique	4	Oui	4	30%	Compétence des équipes projet	3	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs		2	2	Moins de une fois par mois	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)	Beaucoup de soutraitance du developpement et testing à des intégrateurs 	3		Développeurs; Chef de projet; Top management; Architecte	Non	TOGAF	Non		Oui	Oui			Non	
12/15/2018 10:44:21	CHU DE RENNES	Chef de projet informatique	Oui	Entre 500 et 1000	Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Je ne sais pas	2	Hétérogénéité des technologies; Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Entre un et trois mois	3	2	Besoin métier à clarifier		La décision prise dépendra de la priorité donnée par la direction 		3	Non	0	0%	Changements de direction fréquents	2	3		Développeurs		4	4	Moins de une fois par mois	Outils de détection automatique des régressions	Nous ne sommes pas éditeurs des applications déployées.	4		Utilisateur finaux; Chef de projet; Top management	Non		Non		Non	Non			Non	
12/15/2018 12:15:12	Orange	Développeur	Oui	Plus de 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à mettre à jour technologiquement le SI	2	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production	2	Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un et trois mois	2	2	Trouver les fonctionnalités similaires et garder une cohérence globale; Négociation des contrats d’interfaces; Besoin métier à clarifier	Faire la nouvelle version majeure		Minimisant le nombre de micro-services	3	Oui	1	40% et plus	Méthodologie de travail; Réécriture des contrats métier; Spécifications pas assez riches	2	1	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Des outils d’audit détectant les valeurs incohérentes calculées par le système	Infrastructure	Impossibilité de reproduire les tests; Perte de la connaissance du projet	2	2	Moins de une fois par mois	Equipes dédiées à la QA (Quality Assurance)		2	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests	Développeurs; Chef de projet; Architecte	Non		Non		Non	Non			Non	
12/15/2018 13:57:13	OSTRUM AM	Consultant	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts	3	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	2	Hétérogénéité des technologies; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un jour et une semaine	3	3	Adaptation aux technologies imposées; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure	D'une part pour éviter de complexifier le SI, d'autre part, pour le faire évoluer		4	Oui	2	10%	Changements de direction fréquents; Spécifications pas assez riches; Mise à jour des tests de non-régression	2	2		Développeurs	Processus métier trop rigides; Perte de la connaissance du projet; Couplages entre systèmes forts et documentation erronée	3	4	Chaque mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		2	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Utilisateur finaux; Développeurs; Chef de projet	Oui		Non		Non	Non	Confluence	Confluence	Non	
12/15/2018 21:10:31	E-VTECH	Architecte et développeur	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à mettre à jour technologiquement le SI	3	Documentation incomplète ou pas à jour	1	Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Disponibilité et budget des équipes projet	Entre un jour et une semaine	3	0	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	C'est la seule vrai bonne solution, les autres consistes à repousser l'échéance.	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Oui	2	10%	Compétence des équipes projet; Changements de direction fréquents; Spécifications pas assez riches	3	1	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Perte de la connaissance du projet; Couplages entre systèmes forts et documentation erronée	3	3	Chaque semaine	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Complexité des TNR sur clients lourds, taille de l'appli.	3	Couplage entre les systèmes, Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests	Développeurs; Chef de projet; Architecte	Oui	Agile	Non		Non	Non	au travers du nommage dans les sources, des propriétés	Dans les nommages des éléments du code, fichiers de propriété	Non	Aucun moyen mis en oeuvre en ce sens...
12/15/2018 23:09:19	Bouygues telecom	Consultant	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	4	Documentation incomplète ou pas à jour; Manque de connaissances ou compétences; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible)	2	Découpage fonctionnel flou; Directions à suivre, imposées par la SI, peu claires ou changeantes; Règles de sécurité fortes à respecter	Entre une semaine et un mois	2	2	Versionnement des APIs; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure		Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	4	Non	1	20%	Compétence des équipes projet; Méthodologie de travail; Spécifications pas assez riches	4	5	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents	4	3	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	manque de temps pour les sujets techniques	2	Catalogue de technologies imposées par la direction de la SI; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Utilisateur finaux; Développeurs; Architecte	Non		Non		Non	Non			Oui	
12/16/2018 16:50:31	Confidentiel	Développeur	Oui	Entre 100 et 500	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à mettre à jour technologiquement le SI	2	Connaissance détenue par un intervenant extérieur; Manque de connaissances ou compétences; Nombre d’interlocuteurs élevé	1	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre une semaine et un mois	3	3	Intégration du legacy; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Oui	4	10%	Changements de direction fréquents; Spécifications pas assez riches; Mise à jour des tests de non-régression	3	3		Développeurs	Impossibilité de reproduire les tests; Processus métier trop rigides; Perte de la connaissance du projet	4	4	Chaque mois			4	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Architecte									Je ne sais pas	
12/17/2018 0:26:19	Sodifrance	Consultant	Oui	Entre 500 et 1000	Difficulté à identifier et qualifier les anomalies de fonctionnement	2	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Applications mises en production par les équipes sans transparence (shadow IT)	2	Hétérogénéité des technologies; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un et trois mois	2	2	Couplage client/serveur et éventualité de casser un client; Versionnement des APIs; Besoin métier à clarifier	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Pour répondre a un besoin pouvant évoluer définit par le client avec des contraintes projet ainsi que de couplage avec d'autre composant impliqué.	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	2	Oui	3	10%	Méthodologie de travail; Spécifications pas assez riches; Mise à jour des tests de non-régression	3	0	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Perte de la connaissance du projet	4	4	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Equipes dédiées à la QA (Quality Assurance)		3	Couplage entre les systèmes; Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Architecte; Designer	Oui		Non		Oui	Oui	via l’implémentation de web-services	front-end	Je ne sais pas	Via le cycle de développement des versions applicatives
12/17/2018 8:40:42	Capgemini	Architecte	Oui	Plus de 3 000	Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à mettre à jour technologiquement le SI	3	Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	3	Découpage fonctionnel flou; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Plus de trois mois	3	1	Négociation des contrats d’interfaces; Adaptation aux technologies imposées; Besoin métier à clarifier	Faire la nouvelle version majeure	Solution la plus "propre" et que je préconiseraie	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	2	Oui	4	30%	Technologies imposées; Changements de direction fréquents; Spécifications pas assez riches	3	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Processus métier trop rigides	3	3	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		3	Catalogue de technologies imposées par la direction de la SI; Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Chef de projet; Top management; Architecte	Oui	Workshop	Non		Non	Non			Non	
12/17/2018 9:11:03	Atos	Architecte et développeur	Oui	Plus de 3 000	Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à corriger les anomalies; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé	5	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes; Règles de sécurité fortes à respecter	Entre une semaine et un mois	4	2	Négociation des contrats d’interfaces; Intégration du legacy; Besoin métier à clarifier	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	La nouvelle fonctionnalité a normalement un effet direct sur l'expérience client. Proposer plusieurs façon d'y accéder améliore l'agilité du SI. Cela permet également de tester les deux versions aussi bien en terme d'efficacité technique qu'en terme de popularité. La meilleur gagne et reste en cible d'amélioration.		2	Oui	5	40% et plus	Technologies imposées; Compétence des équipes projet; Spécifications pas assez riches	3	1	Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Processus métier trop rigides; Manque de compétences sur les technologies de développement utilisées; Couplages entre systèmes forts et documentation erronée	3	1	Chaque semaine	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier	Les outils existent, mais soit il sont trop rigide, soit mal utilisés. Succession d'outils ne pouvant pas être utilisés unitairement car faisant partis d'un processus global. (Effet tunnel)	5	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Architecte	Non		Oui	Excel, Mega, developpement maison.	Oui	Non	Avec l'urbanisation	Dans Mega	Je ne sais pas	Aucune assurance. C'est la gestion du risque qui s'en charge. L'utilisation d'une autre brique du SI que celle référant le concept utilisé fait naitre un risque a celui qui ne l'utilise pas. 
12/17/2018 10:28:39	Confidentiel	Architecte	Oui	Moins de 100	Difficulté à mettre à jour technologiquement le SI	5	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production	0	Découpage fonctionnel flou; Hétérogénéité des technologies; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Disponibilité et budget des équipes projet	Entre un et trois mois	1	2	Couplage client/serveur et éventualité de casser un client; Intégration du legacy; Budget alloué non suffisant	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité			1	Non	3	30%	Méthodologie de travail; Spécifications pas assez riches	1	4	Des outils d’audit détectant les valeurs incohérentes calculées par le système; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Perte de la connaissance du projet	5	2	Chaque mois	Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)		4	Catalogue de technologies imposées par la direction de la SI; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Architecte			Non		Non	Non			Non	
12/17/2018 10:29:33	LACROIX SA	Architecte et développeur	Oui	Moins de 100	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à mettre à jour technologiquement le SI	2	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur	3	Découpage fonctionnel flou; Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort	Entre un jour et une semaine	3	4	Couplage client/serveur et éventualité de casser un client; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure	Le versioning ne doit pas être contraint par des volontés marketing.	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	4	Oui	4	0%	Technologies imposées; Spécifications pas assez riches; Mise à jour des tests de non-régression	3	1	La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	4	3	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Reprise du pilotage du SI très récente. Leur mise en place est en cours	4	Couplage entre les systèmes; Contrats immuables conclus entre les équipes projet; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests	Utilisateur finaux; Chef de projet; Top management	Oui	Agile	Oui	OneNote	Non	Non	On souhaite privilégier un découpage fonctionnel à un découpage technique	Pour le moment nulle part mais nous souhaitons faire un découpage en micro-services plutôt orienté métier	Non	Des briques et services transverses doivent définir à terme les concepts métiers.
12/17/2018 10:52:31	CNP-TI	Architecte	Oui	Entre 1 000 et 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	3	Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	2	Découpage fonctionnel flou; Hétérogénéité des technologies; Disponibilité et budget des équipes projet	Entre un et trois mois	3	3	Couplage client/serveur et éventualité de casser un client; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Non	2	30%	Spécifications pas assez riches; Mise à jour des tests de non-régression	3	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents	3	3	Chaque mois	Processus de livraison et déploiement continus; Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier		3	Couplage entre les systèmes; Processus de déploiement longs	Chef de projet; Architecte; MOA	Non	Pas de méthode unique. Dépend des projets	Non		Non	Non	Nous ne le faisont pas vraiment		Non	
12/17/2018 11:48:27	Sodifrance	Développeur	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	3	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production	3	Architecture trop rigide / couplage entre les composants très fort; Règles de sécurité fortes à respecter	Entre un jour et une semaine	2	1	Négociation des contrats d’interfaces; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure		Minimisant le nombre de micro-services	2	Oui	3	20%	Compétence des équipes projet; Méthodologie de travail; Spécifications pas assez riches	1	1	Un accès aux logs de production et au monitoring applicatif pour les développeurs	Développeurs	Couplages entre systèmes forts et documentation erronée	3	2	Chaque semaine	Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)	a cause du client	2	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Développeurs; Chef de projet; Architecte	Non	Agile	Non		Non	Non	doc interne		Non	
12/17/2018 12:16:49	Capgemini	Architecte et développeur	Oui	Entre 100 et 500	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à mettre à jour technologiquement le SI	4	Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	2	Règles de sécurité fortes à respecter; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	4	Négociation des contrats d’interfaces; Intégration du legacy	Faire la nouvelle version majeure	Plus "propre", gestion de version plus simple (configuration, déploiement...)		3	Oui	2	30%	Réécriture des contrats métier	2	3	La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Impossibilité de reproduire les tests	3	2	Moins de une fois par mois			3	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie; Processus de déploiement longs	Utilisateur finaux; Chef de projet; Architecte	Non		Non		Non	Non			Non	
12/17/2018 12:34:29	Orange	Développeur	Oui	Entre 100 et 500	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier où positionner une nouvelle fonctionnalité; Difficulté à mettre à jour technologiquement le SI	5	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé; Pas de référentiel des applications en production	3	Découpage fonctionnel flou; Hétérogénéité des technologies; Disponibilité et budget des équipes projet	Entre un jour et une semaine	3	4	Négociation des contrats d’interfaces; Adaptation aux technologies imposées; Intégration du legacy	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Imposé par le client	Minimisant le nombre de micro-services	4	Non	2	20%	Compétence des équipes projet; Méthodologie de travail; Changements de direction fréquents	1	4	La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	1	1	Moins de une fois par mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		1		Architecte; Commerciaux	Oui	Agile	Non		Non	Non			Non	
12/17/2018 21:00:09	CNP-TI	Architecte et développeur	Oui	Je ne sais pas	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité	3	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible)	3	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Disponibilité et budget des équipes projet	Plus de trois mois	3	4	Négociation des contrats d’interfaces; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	Toujours aller de l'avant et d'offrir de nouveaux services	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes, Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	2	Non	2	30%	Méthodologie de travail; Réécriture des contrats métier; Changements de direction fréquents	2	0	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests	4	4	Chaque semaine	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Nous les avons. Sauf que dans le legacy, l'écriture des TU est un rêve	4	Contrats immuables conclus entre les équipes projet; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Utilisateur finaux; Développeurs; Chef de projet; Architecte	Oui	Atelier de travail fréquent où un doc de conception est élaboré	Non		Non	Non			Non	
12/18/2018 9:23:47	Timwi Consulting	Consultant architecte	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	2	Connaissance détenue par un intervenant extérieur; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Pas de référentiel des applications en production	5	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI	Entre un jour et une semaine	4	0	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy; Connaissance du SI incomplète	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	1	Oui	2	20%		0	3	Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple)	5	5	Chaque jour	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		4	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Chef de projet; Top management; Architecte	Non		Non		Non	Non			Oui	
12/18/2018 10:26:34	Capgemini	Consultant	Oui	Plus de 3 000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à mettre à jour technologiquement le SI	3	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI	Plus de trois mois	3	3	Couplage client/serveur et éventualité de casser un client; Négociation des contrats d’interfaces; Intégration du legacy	Faire la nouvelle version majeure	Favoriser l'approche DevOps ou une nouvauté est un non événement	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Non	2	30%	Méthodologie de travail; Changements de direction fréquents; Mise à jour des tests de non-régression	2	2	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Infrastructure	Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Manque de compétences sur les technologies de développement utilisées	3	3	Chaque semaine	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Equipes dédiées à la QA (Quality Assurance)	non maturité DevOps	3	Couplage entre les systèmes; Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Architecte	Oui	DevOps	Non		Non	Non	Démarche projet	Documentation projet	Je ne sais pas	Je ne sais pas
12/18/2018 17:21:05	Sodifrance	Architecte et développeur	Oui	Entre 500 et 1000	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	5	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Hétérogénéité des technologies; Directions à suivre, imposées par la SI, peu claires ou changeantes	Plus de trois mois	5	1	Négociation des contrats d’interfaces; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure	Pour simplifier la gestion de version	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	0	Oui	4	10%	Technologies imposées; Compétence des équipes projet; Méthodologie de travail	0	0	La capacité à monitorer certaines technologies utilisées en production	Infrastructure	Impossibilité de reproduire les tests; Perte de la connaissance du projet	5	5	Chaque jour	Processus de livraison et déploiement continus; Tests de non-régressions métier écrits par le métier		5	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Chef de projet; Top management	Non		Non		Non	Non			Je ne sais pas	
12/18/2018 18:57:04	Neutronium 	Consultant	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à identifier et qualifier les anomalies de fonctionnement; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Applications mises en production par les équipes sans transparence (shadow IT)	0	Découpage fonctionnel flou; Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre un jour et une semaine	0	3	Intégration du legacy; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure	Mesurer l'impact de la dette technique au préalable. L'utilisation de (micro) services bien dimensionnés aide fortement a éviter d'impacter les autres fonctionnalités.	Avec un serveur GraphQL qui joue le rôle de proxy au dessus de toutes les APIs	4	Non	3	10%	Compétence des équipes projet; Méthodologie de travail; Changements de direction fréquents	3	4	Des outils d’audit détectant les valeurs incohérentes calculées par le système; La capacité à monitorer certaines technologies utilisées en production; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Environnements de test et production très différents; Mauvaise maitrise des technologies utilisées en production (peut être causé par leur hétérogénéité ou une trop grande diversité par exemple); Perte de la connaissance du projet	4	2	Moins de une fois par mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Equipes dédiées à la QA (Quality Assurance)	Pratiques peu répandues, notamment la qa. L'absence d'une équipe de QA et de cycle de qualification court est souvent le symptôme d'un manque de maturité organisationnelle	3	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Utilisateur finaux; Développeurs; Chef de projet; Top management; Architecte; Designer	Oui		Non		Non	Non			Non	Via les daily meeting, en y intégrant notamment les nouveaux arrivants. Cela permet de partager la même culture et le même langage
12/18/2018 21:39:06	Veonum	Développeur	Oui	Moins de 100	Difficulté à corriger les anomalies	3	Documentation incomplète ou pas à jour; Nombre d’interlocuteurs élevé	2	Découpage fonctionnel flou; Hétérogénéité des technologies	Entre un jour et une semaine	2	3	Couplage client/serveur et éventualité de casser un client; Intégration du legacy; Besoin métier à clarifier	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	3	Oui	1	10%	Technologies imposées; Changements de direction fréquents	3	1	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Perte de la connaissance du projet	2	2	Chaque mois	Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier; Equipes dédiées à la QA (Quality Assurance)		2	Délai d’acceptation des nouvelles versions par la direction de la SI	Développeurs; Chef de projet; Top management; Métier mais pas forcément utilisateur final	Non		Non		Non	Non			Non	
12/19/2018 11:56:34	Confidentiel	Architecte et développeur	Oui	Moins de 100	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts	3	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible)	2	Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un jour et une semaine	2	3	Couplage client/serveur et éventualité de casser un client; Intégration du legacy; Budget alloué non suffisant	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	2	Non	1	10%	Changements de direction fréquents; Spécifications pas assez riches; Mise à jour des tests de non-régression	1	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système	Développeurs	Impossibilité de reproduire les tests; Couplages entre systèmes forts et documentation erronée	4	3	Chaque semaine	Processus de livraison et déploiement continus; Fixer un taux de couverture minimal pour passer une application en production		0		Développeurs; Top management; Architecte	Oui		Non		Non	Non			Je ne sais pas	
12/19/2018 13:45:50	SII	Architecte et développeur	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à mettre à jour technologiquement le SI	4	Connaissance détenue par un intervenant extérieur; Applications mises en production par les équipes sans transparence (shadow IT)	1	Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Moins de un jour	2	4	Intégration du legacy; Besoin métier à clarifier; Budget alloué non suffisant	Faire la nouvelle version majeure	On synchronise les modifications avec les consommateurs de l'API. 	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	4	Non	2	10%	Technologies imposées; Spécifications pas assez riches	1	2	Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Perte de la connaissance du projet	1	1	Moins de une fois par mois	Equipes dédiées à la QA (Quality Assurance)	Question de budget...	1	Processus de déploiement longs	Utilisateur finaux; Chef de projet; Top management	Non		Non		Non	Non			Non	
12/19/2018 14:19:02	Sogeti	Architecte	Oui	Plus de 3 000	Difficulté à identifier où positionner une nouvelle fonctionnalité; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	2	Documentation incomplète ou pas à jour; Connaissance détenue par un intervenant extérieur; Nombre d’interlocuteurs élevé	3	Hétérogénéité des technologies; Directions à suivre, imposées par la SI, peu claires ou changeantes; Règles de sécurité fortes à respecter	Entre une semaine et un mois	3	1	Trouver les fonctionnalités similaires et garder une cohérence globale; Connaissance du SI incomplète; Besoin métier à clarifier	Faire la nouvelle version majeure		Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	2	Oui	3	10%	Technologies imposées; Méthodologie de travail; Changements de direction fréquents	3	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Perte de la connaissance du projet	3	3	Moins de une fois par mois	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier		3	Couplage entre les systèmes; Catalogue de technologies imposées par la direction de la SI; Processus de déploiement longs	Chef de projet	Non		Non		Oui	Oui			Oui	
12/19/2018 20:17:56	i-BP	Consultant	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	1	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	3	Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre un et trois mois	3	2	Trouver les fonctionnalités similaires et garder une cohérence globale; Intégration du legacy; Besoin métier à clarifier	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	Trop long de mettre le gens d'accord sur le nouveau contrat	Créant des proxy qui créent une API pour un client à partir des APIs déjà existantes	2	Oui	3	0%	Méthodologie de travail; Changements de direction fréquents; Spécifications pas assez riches	4	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	3	3	Moins de une fois par mois	Processus de livraison et déploiement continus; Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier		4	Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs; Délai d’acceptation des nouvelles versions par la direction de la SI	Chef de projet; Architecte; Designer; AMOA		un peu agile / bcp cycle en V						un peu partout	Je ne sais pas	ils ne sont pas utilisés uniformément
12/20/2018 20:14:58	Thales services	Développeur	Oui	Moins de 100	Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	2	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	2	Hétérogénéité des technologies; Architecture trop rigide / couplage entre les composants très fort	Entre un jour et une semaine	2	1	Couplage client/serveur et éventualité de casser un client; Versionnement des APIs	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité		Spécialisant les APIs au mieux pour un client spécifique	3	Oui	3	40% et plus	Technologies imposées; Mise à jour des tests de non-régression	3	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système; Un accès aux logs de production et au monitoring applicatif pour les développeurs	Infrastructure	Impossibilité de reproduire les tests; Environnements de test et production très différents; Perte de la connaissance du projet	2	2	Chaque semaine	Processus de livraison et déploiement continus; Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier		4	Couplage entre les systèmes; Contrats immuables conclus entre les équipes projet; Catalogue de technologies imposées par la direction de la SI	Développeurs; Chef de projet; Designer	Non		Non						Non	
1/2/2019 10:43:17	Confidentiel	Architecte et développeur	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à empêcher les régressions en cas d’ajout de fonctionnalité; Difficulté à mettre à jour technologiquement le SI	3	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Applications mises en production par les équipes sans transparence (shadow IT)	2	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Moins de un jour	3	3	Couplage client/serveur et éventualité de casser un client; Versionnement des APIs; Adaptation aux technologies imposées	Faire la nouvelle version majeure	Pour éviter les confusions	Spécialisant les APIs au mieux pour un client spécifique	3	Oui	3	20%	Technologies imposées; Méthodologie de travail; Spécifications pas assez riches	3	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Impossibilité de reproduire les tests; Processus métier trop rigides; Couplages entre systèmes forts et documentation erronée	3	3	Moins de une fois par mois	Processus de livraison et déploiement continus; Fixer un taux de couverture minimal pour passer une application en production; Tests de non-régressions métier écrits par le métier		3	Couplage entre les systèmes; Contrats immuables conclus entre les équipes projet; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible confiance dans l’éditeur de la technologie	Utilisateur finaux; Développeurs; Chef de projet; Architecte	Oui	Agile	Non		Oui	Oui	Librairie dynamique	Sur les postes en production et les serveurs	Oui	dossier de spécifications, règle de codage 
1/7/2019 22:48:01	Libre Logic	Consultant	Oui	Moins de 100	Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Manque de connaissances ou compétences; Pas de référentiel des applications en production	2	Inadéquation entre les compétences des équipes projet et les technologies utilisées par certaines briques du SI; Directions à suivre, imposées par la SI, peu claires ou changeantes; Disponibilité et budget des équipes projet	Entre une semaine et un mois	2	3	Besoin métier à clarifier; Budget alloué non suffisant	Faire la nouvelle version majeure	Afin d'en profiter pour faire du re-factoring 		3	Non	0	10%	Compétence des équipes projet; Changements de direction fréquents	1	2	Réduire l’hétérogénéité des solutions de déploiement (VM; docker; Cloud; etc.)	Développeurs	Couplages entre systèmes forts et documentation erronée	2	2	Moins de une fois par mois		Manque de temps / budgets	2	Couplage entre les systèmes	Chef de projet; Top management; Architecte	Non	Un mix entre RUP / scrum / GTD	Oui	Visual Paradigm (lors des spécifications fonctionnelles )	Oui	Oui			Non	
1/14/2019 12:25:20	Arolla	Consultant Architecte et développeur	Oui	Je ne sais pas	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à concevoir une nouvelle fonctionnalité et étudier ses impacts; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité	2	Documentation incomplète ou pas à jour; Connaissance du SI diffuse et peu accessible (à l’inverse de centralisée et accessible); Nombre d’interlocuteurs élevé	4	Découpage fonctionnel flou; Architecture trop rigide / couplage entre les composants très fort; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre une semaine et un mois	4	1	Versionnement des APIs; Négociation des contrats d’interfaces; Intégration du legacy	Trouver une solution de contournement quitte à avoir plusieurs versions d’une même fonctionnalité	A grande échelle, une nouvelle version majeure implique la coordination de trop de monde, donc un effet Big Bang très coûteux et dangereux	Spécialisant les APIs au mieux pour un client spécifique	3	Oui	4	20%	Compétence des équipes projet	4	3	Des outils d’audit détectant les valeurs incohérentes calculées par le système	Développeurs	Environnements de test et production très différents; Manque de compétences sur les technologies de développement utilisées; Couplages entre systèmes forts et documentation erronée	3	3	Chaque semaine	Processus de livraison et déploiement continus; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Nos clients ne sont pas tous à l'état de l'art (gentiment dit)	5	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Processus de déploiement longs	Utilisateur finaux; Développeurs; Chef de projet; Architecte; Designer	Oui	DDD	Oui	le code (plus un Glossaire Vivant tel que défini dans mon livre Living Documentation)	Non	Non	On évite de les intégrer, les concepts métier sont rarement pertinent globalement  ; on les garde localement, et on traduit aux frontières	dans chaque bounded context (service, module...)	Non	On ne cherche pas ça, on admet désormais que c'est impossible et non désirable. Etre pertinent localement c'est déjà bien. 
1/15/2019 12:30:17	Iperia l'institut	DSI	Oui	Moins de 100	Difficulté à garder la connaissance du fonctionnement du SI; Difficulté à réaliser, dans un temps raisonnable, une fonctionnalité; Difficulté à mettre à jour technologiquement le SI	4	Documentation incomplète ou pas à jour; Manque de connaissances ou compétences; Applications mises en production par les équipes sans transparence (shadow IT)	1	Architecture trop rigide / couplage entre les composants très fort; Disponibilité et budget des équipes projet; Directions à suivre, imposées par la SI, peu claires ou changeantes	Entre un jour et une semaine	2	2	Versionnement des APIs; Trouver les fonctionnalités similaires et garder une cohérence globale; Besoin métier à clarifier	Faire la nouvelle version majeure	Si la fonctionnalité le nécessite, il faut le faire. Cela force la mise à jour fréquente des projets.	Spécialisant les APIs au mieux pour un client spécifique	3	Oui	3	20%	Réécriture des contrats métier; Changements de direction fréquents; Spécifications pas assez riches	2	3	Procédures d’exploitation détaillant comment résoudre les problèmes d’exploitation les plus courants; La capacité à monitorer certaines technologies utilisées en production	Développeurs	Impossibilité de reproduire les tests; Environnements de test et production très différents; Couplages entre systèmes forts et documentation erronée	3	4	Chaque mois	Fixer un taux de couverture minimal pour passer une application en production; Outils de détection automatique des régressions; Tests de non-régressions métier écrits par le métier	Manque de temps	3	Couplage entre les systèmes; Peur de casser quelque chose en mettant à jour une dépendance, liée à la faible couverture de tests; Délai d’acceptation des nouvelles versions par la direction de la SI	Utilisateur finaux; Développeurs; Chef de projet; Top management; Architecte	Oui	UML	Oui	Word	Non	Oui			Non	-